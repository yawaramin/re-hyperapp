/** Hack to reuse Reason's built-in support for JSX. But it does mean
    that re-hyperapp and reason-react can't be used together (because of
    the conflicting modules). That's probably not a problem in practice
    though.

    See
    {{:https://reasonml.github.io/reason-react/docs/en/jsx}https://reasonml.github.io/reason-react/docs/en/jsx}
    for a description of how the transform works. */

type element = Dom.element;
type vdom = Yawaramin_ReHyperapp.vdom;
type onDone = (. unit) => Js.Promise.t(unit);

/** The Reason JSX transform uses this to created uncapitalized DOM
    elements. */
[@bs.module "hyperapp"] [@bs.variadic]
external createElement: (string, ~props: Js.t({..})=?, array(vdom)) => vdom = "h";

/** All valid HTML attributes (that are legal identifiers in OCaml),
    using https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes as
    a reference. This is needed for uncapitalized elements support in JSX. */
[@bs.obj] external props: (
  /* HTML attributes:
     https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes */

  ~accept: string=?,
  ~accesskey: string=?,
  ~action: string=?,
  ~align: string=?,
  ~allow: string=?,
  ~alt: string=?,
  ~async: string=?,
  ~autocapitalize: string=?,
  ~autocomplete: string=?,
  ~autofocus: string=?,
  ~autoplay: string=?,
  ~bgcolor: string=?,
  ~border: string=?,
  ~buffered: bool=?,
  ~challenge: string=?,
  ~charset: string=?,
  ~checked: bool=?,
  ~cite: string=?,
  ~_class: string=?,
  ~code: string=?,
  ~codebase: string=?,
  ~color: string=?,
  ~cols: string=?,
  ~colspan: string=?,
  ~content: string=?,
  ~contenteditable: string=?,
  ~contextmenu: string=?,
  ~controls: string=?,
  ~coords: string=?,
  ~crossorigin: string=?,
  ~csp: string=?,
  ~data: string=?,
  ~datetime: string=?,
  ~decoding: string=?,
  ~default: string=?,
  ~defer: string=?,
  ~dir: string=?,
  ~dirname: string=?,
  ~disabled: bool=?,
  ~download: string=?,
  ~draggable: string=?,
  ~dropzone: string=?,
  ~enctype: string=?,
  ~_for: string=?,
  ~form: string=?,
  ~formaction: string=?,
  ~headers: string=?,
  ~height: string=?,
  ~hidden: string=?,
  ~high: string=?,
  ~href: string=?,
  ~hreflang: string=?,
  ~icon: string=?,
  ~id: string=?,
  ~importance: string=?,
  ~integrity: string=?,
  ~ismap: string=?,
  ~itemprop: string=?,
  ~keytype: string=?,
  ~kind: string=?,
  ~label: string=?,
  ~lang: string=?,
  ~language: string=?,
  ~lazyload: string=?,
  ~list: string=?,
  ~loop: string=?,
  ~low: string=?,
  ~manifest: string=?,
  ~max: string=?,
  ~maxlength: string=?,
  ~minlength: string=?,
  ~media: string=?,
  ~method: string=?,
  ~min: string=?,
  ~multiple: string=?,
  ~muted: bool=?,
  ~name: string=?,
  ~novalidate: bool=?,
  ~_open: string=?,
  ~optimum: string=?,
  ~pattern: string=?,
  ~ping: string=?,
  ~placeholder: string=?,
  ~poster: string=?,
  ~preload: string=?,
  ~radiogroup: string=?,
  ~readonly: bool=?,
  ~referrerpolicy: string=?,
  ~rel: string=?,
  ~required: bool=?,
  ~reversed: bool=?,
  ~role: string=?,
  ~rows: string=?,
  ~rowspan: string=?,
  ~sandbox: string=?,
  ~scope: string=?,
  ~scoped: bool=?,
  ~selected: bool=?,
  ~shape: string=?,
  ~size: string=?,
  ~sizes: string=?,
  ~slot: string=?,
  ~span: string=?,
  ~spellcheck: string=?,
  ~src: string=?,
  ~srcdoc: string=?,
  ~srclang: string=?,
  ~srcset: string=?,
  ~start: string=?,
  ~step: string=?,
  ~style: string=?,
  ~summary: string=?,
  ~tabindex: string=?,
  ~target: string=?,
  ~title: string=?,
  ~translate: string=?,
  ~_type: string=?,
  ~usemap: string=?,
  ~value: string=?,
  ~width: string=?,
  ~wrap: string=?,

  /* TODO: SVG attributes:
     https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute */

  // DOM events: https://developer.mozilla.org/en-US/docs/Web/Events

  ~oncached: (. 'cachedEvent) => unit=?,
  ~onerror: (. 'errorEvent) => unit=?,
  ~onbeforeunload: (. 'beforeunloadEvent) => unit=?,
  ~onunload: (. 'unloadEvent) => unit=?,
  ~ononline: (. 'onlineEvent) => unit=?,
  ~onoffline: (. 'offlineEvent) => unit=?,
  ~onfocus: (. 'focusEvent) => unit=?,
  ~onblur: (. 'blurEvent) => unit=?,
  ~onclose: (. 'closeEvent) => unit=?,
  ~onpagehide: (. 'pagehideEvent) => unit=?,
  ~onpageshow: (. 'pageshowEvent) => unit=?,
  ~onpopstate: (. 'popstateEvent) => unit=?,
  ~onanimationstart: (. 'animationstartEvent) => unit=?,
  ~onanimationend: (. 'animationendEvent) => unit=?,
  ~onanimationiteration: (. 'animationiterationEvent) => unit=?,
  ~ontransitionstart: (. 'transitionstartEvent) => unit=?,
  ~ontransitioncancel: (. 'transitioncancelEvent) => unit=?,
  ~ontransitionend: (. 'transitionendEvent) => unit=?,
  ~ontransitionrun: (. 'transitionrunEvent) => unit=?,
  ~onreset: (. 'resetEvent) => unit=?,
  ~onsubmit: (. 'submitEvent) => unit=?,
  ~onbeforeprint: (. 'beforeprintEvent) => unit=?,
  ~onafterprint: (. 'afterprintEvent) => unit=?,
  ~oncompositionstart: (. 'compositionstartEvent) => unit=?,
  ~oncompositionupdate: (. 'compositionupdateEvent) => unit=?,
  ~oncompositionend: (. 'compositionendEvent) => unit=?,
  ~onfullscreenchange: (. 'fullscreenchangeEvent) => unit=?,
  ~onfullscreenerror: (. 'fullscreenerrorEvent) => unit=?,
  ~onresize: (. 'resizeEvent) => unit=?,
  ~onscroll: (. 'scrollEvent) => unit=?,
  ~oncut: (. 'cutEvent) => unit=?,
  ~oncopy: (. 'copyEvent) => unit=?,
  ~onpaste: (. 'pasteEvent) => unit=?,
  ~onkeydown: (. 'keydownEvent) => unit=?,
  ~onkeypress: (. 'keypressEvent) => unit=?,
  ~onkeyup: (. 'keyupEvent) => unit=?,
  ~onauxclick: (. 'auxclickEvent) => unit=?,
  ~onclick: (. 'clickEvent) => unit=?,
  ~oncontextmenu: (. 'contextmenuEvent) => unit=?,
  ~ondblclick: (. 'dblclickEvent) => unit=?,
  ~onmousedown: (. 'mousedownEvent) => unit=?,
  ~onmouseenter: (. 'mouseenterEvent) => unit=?,
  ~onmouseleave: (. 'mouseleaveEvent) => unit=?,
  ~onmousemove: (. 'mousemoveEvent) => unit=?,
  ~onmouseover: (. 'mouseoverEvent) => unit=?,
  ~onmouseout: (. 'mouseoutEvent) => unit=?,
  ~onmouseup: (. 'mouseupEvent) => unit=?,
  ~onpointerlockchange: (. 'pointerlockchangeEvent) => unit=?,
  ~onpointerlockerror: (. 'pointerlockerrorEvent) => unit=?,
  ~onselect: (. 'selectEvent) => unit=?,
  ~onwheel: (. 'wheelEvent) => unit=?,
  ~ondrag: (. 'dragEvent) => unit=?,
  ~ondragend: (. 'dragendEvent) => unit=?,
  ~ondragenter: (. 'dragenterEvent) => unit=?,
  ~ondragstart: (. 'dragstartEvent) => unit=?,
  ~ondragleave: (. 'dragleaveEvent) => unit=?,
  ~ondragover: (. 'dragoverEvent) => unit=?,
  ~ondrop: (. 'dropEvent) => unit=?,
  ~onaudioprocess: (. 'audioprocessEvent) => unit=?,
  ~oncanplay: (. 'canplayEvent) => unit=?,
  ~oncanplaythrough: (. 'canplaythroughEvent) => unit=?,
  ~oncomplete: (. 'completeEvent) => unit=?,
  ~ondurationchange: (. 'durationchangeEvent) => unit=?,
  ~onemptied: (. 'emptiedEvent) => unit=?,
  ~onended: (. 'endedEvent) => unit=?,
  ~onloadeddata: (. 'loadeddataEvent) => unit=?,
  ~onloadedmetadata: (. 'loadedmetadataEvent) => unit=?,
  ~onpause: (. 'pauseEvent) => unit=?,
  ~onplay: (. 'playEvent) => unit=?,
  ~onplaying: (. 'playingEvent) => unit=?,
  ~onratechange: (. 'ratechangeEvent) => unit=?,
  ~onseeked: (. 'seekedEvent) => unit=?,
  ~onseeking: (. 'seekingEvent) => unit=?,
  ~onstalled: (. 'stalledEvent) => unit=?,
  ~onsuspend: (. 'suspendEvent) => unit=?,
  ~ontimeupdate: (. 'timeupdateEvent) => unit=?,
  ~onvolumechange: (. 'volumechangeEvent) => unit=?,
  ~onwaiting: (. 'waitingEvent) => unit=?,
  ~onabort: (. 'abortEvent) => unit=?,
  ~onload: (. 'loadEvent) => unit=?,
  ~onloadend: (. 'loadendEvent) => unit=?,
  ~onloadstart: (. 'loadstartEvent) => unit=?,
  ~onprogress: (. 'progressEvent) => unit=?,
  ~ontimeout: (. 'timeoutEvent) => unit=?,
  ~onchange: (. 'changeEvent) => unit=?,
  ~onstorage: (. 'storageEvent) => unit=?,
  ~onchecking: (. 'checkingEvent) => unit=?,
  ~ondownloading: (. 'downloadingEvent) => unit=?,
  ~onnoupdate: (. 'noupdateEvent) => unit=?,
  ~onobsolete: (. 'obsoleteEvent) => unit=?,
  ~onupdateready: (. 'updatereadyEvent) => unit=?,
  ~onbroadcast: (. 'broadcastEvent) => unit=?,
  ~onCheckboxStateChange: (. 'CheckboxStateChangeEvent) => unit=?,
  ~onhashchange: (. 'hashchangeEvent) => unit=?,
  ~oninput: (. 'inputEvent) => unit=?,
  ~onRadioStateChange: (. 'RadioStateChangeEvent) => unit=?,
  ~onreadystatechange: (. 'readystatechangeEvent) => unit=?,
  ~onValueChange: (. 'ValueChangeEvent) => unit=?,
  ~oninvalid: (. 'invalidEvent) => unit=?,
  ~onlocalized: (. 'localizedEvent) => unit=?,
  ~onmessage: (. 'messageEvent) => unit=?,
  ~onopen: (. 'openEvent) => unit=?,
  ~onshow: (. 'showEvent) => unit=?,

  /* Hyperapp DOM lifecycle events:
     https://github.com/jorgebucaran/hyperapp#lifecycle-events */

  ~oncreate: (. element) => unit=?,
  ~onupdate: (. element, Js.t({..})) => unit=?,
  ~onremove: (. element, onDone) => unit=?,
  ~ondestroy: (. element) => unit=?,

  // Hyperapp DOM node key: https://github.com/jorgebucaran/hyperapp#keys

  ~key: string=?,

  unit,
) => _ = "";
