/** Hack to reuse Reason's built-in support for JSX. But it does mean
    that re-hyperapp and reason-react can't be used together (because of
    the conflicting modules). That's probably not not a problem in
    practice though.

    See
    {{:https://reasonml.github.io/reason-react/docs/en/jsx}https://reasonml.github.io/reason-react/docs/en/jsx}
    for a description of how the transform works. */

type vdom = Yawaramin_ReHyperapp.vdom;

/** The Reason JSX transform uses this to created uncapitalized DOM
    elements. */
[@bs.module "hyperapp"] [@bs.variadic]
external createElement: (string, ~props: Js.t({..})=?, array(vdom)) => vdom = "h";

/** All valid HTML attributes (that are legal identifiers in OCaml),
    using https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes as
    a reference. This is needed for uncapitalized elements support in JSX. */
[@bs.obj] external props: (
  ~accept: string=?,
  ~accesskey: string=?,
  ~action: string=?,
  ~align: string=?,
  ~allow: string=?,
  ~alt: string=?,
  ~async: string=?,
  ~autocapitalize: string=?,
  ~autocomplete: string=?,
  ~autofocus: string=?,
  ~autoplay: string=?,
  ~bgcolor: string=?,
  ~border: string=?,
  ~buffered: string=?,
  ~challenge: string=?,
  ~charset: string=?,
  ~checked: string=?,
  ~cite: string=?,
  ~_class: string=?,
  ~code: string=?,
  ~codebase: string=?,
  ~color: string=?,
  ~cols: string=?,
  ~colspan: string=?,
  ~content: string=?,
  ~contenteditable: string=?,
  ~contextmenu: string=?,
  ~controls: string=?,
  ~coords: string=?,
  ~crossorigin: string=?,
  ~csp: string=?,
  ~data: string=?,
  ~datetime: string=?,
  ~decoding: string=?,
  ~default: string=?,
  ~defer: string=?,
  ~dir: string=?,
  ~dirname: string=?,
  ~disabled: string=?,
  ~download: string=?,
  ~draggable: string=?,
  ~dropzone: string=?,
  ~enctype: string=?,
  ~_for: string=?,
  ~form: string=?,
  ~formaction: string=?,
  ~headers: string=?,
  ~height: string=?,
  ~hidden: string=?,
  ~high: string=?,
  ~href: string=?,
  ~hreflang: string=?,
  ~icon: string=?,
  ~id: string=?,
  ~importance: string=?,
  ~integrity: string=?,
  ~ismap: string=?,
  ~itemprop: string=?,
  ~keytype: string=?,
  ~kind: string=?,
  ~label: string=?,
  ~lang: string=?,
  ~language: string=?,
  ~lazyload: string=?,
  ~list: string=?,
  ~loop: string=?,
  ~low: string=?,
  ~manifest: string=?,
  ~max: string=?,
  ~maxlength: string=?,
  ~minlength: string=?,
  ~media: string=?,
  ~method: string=?,
  ~min: string=?,
  ~multiple: string=?,
  ~muted: string=?,
  ~name: string=?,
  ~novalidate: string=?,
  ~onkeypress: (. 'event) => 'state=?,
  ~_open: string=?,
  ~optimum: string=?,
  ~pattern: string=?,
  ~ping: string=?,
  ~placeholder: string=?,
  ~poster: string=?,
  ~preload: string=?,
  ~radiogroup: string=?,
  ~readonly: string=?,
  ~referrerpolicy: string=?,
  ~rel: string=?,
  ~required: string=?,
  ~reversed: string=?,
  ~role: string=?,
  ~rows: string=?,
  ~rowspan: string=?,
  ~sandbox: string=?,
  ~scope: string=?,
  ~scoped: string=?,
  ~selected: string=?,
  ~shape: string=?,
  ~size: string=?,
  ~sizes: string=?,
  ~slot: string=?,
  ~span: string=?,
  ~spellcheck: string=?,
  ~src: string=?,
  ~srcdoc: string=?,
  ~srclang: string=?,
  ~srcset: string=?,
  ~start: string=?,
  ~step: string=?,
  ~style: string=?,
  ~summary: string=?,
  ~tabindex: string=?,
  ~target: string=?,
  ~title: string=?,
  ~translate: string=?,
  ~_type: string=?,
  ~usemap: string=?,
  ~value: string=?,
  ~width: string=?,
  ~wrap: string=?,
  unit,
) => _ = "";
